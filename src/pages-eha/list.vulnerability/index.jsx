import { ArrowLeftOutlined, CheckOutlined, DeleteOutlined, EyeOutlined } from "@ant-design/icons"
import { GET_API_EHA } from "../../api/eha/GET"
// import { ButtonComponents } from "../../components.eha/button"
// import { SelectComponent } from "../../components.eha/select"
import { CardBox } from "../../components/layout/card"
import { LayoutDashboard } from "../../components/layout/dashboard.layout"
import { TitleContent } from "../../components/layout/title"
import { TableInline } from "../../components/table"
import { GetAndUpdateContext } from "../../model/context.function"
import { ErrorHtml, Loading } from "../list.maintenance"
// import { AddModal } from "../list.task.scan/add.modal"
import { Descriptions, Popconfirm } from "antd"
import { DELETE_API } from "../../api/eha/DELETE"
import { FormAdd } from "./form-add"
import { useLocation, useNavigate } from "react-router-dom"
import { ModalsComponent } from "../../components.eha/modal"
import { useEffect, useState } from "react"
import { isObject, isString } from "radash"


const ModalShow = () => {
    const { status } = GetAndUpdateContext()
    const [data, setData] = useState([])
    const [Sub, setSub] = useState([])

    var find = "Nessus";
    var regex = new RegExp(find, "g");

    useEffect(() => {

        if (status.dataVun) {
            let item = status.dataVun
            for (const key in item) {
                setData(d => [...d, key])

                if (isObject(item[key])) {
                    for (const itens in item[key]) {
                        setSub(d => [...d, itens])
                    }
                }
            }
        }

        return () => {
            setData([])
            setSub([])
        }

    }, [status.dataVun])


    if (!status.dataVun) {
        return
    }

    delete status.dataVun.finding_description


    return <ModalsComponent width={"100%"} modalName={"previewModal"} title={"Preview VULNERABILITIES"}>

        <Descriptions bordered size="small" layout="vertical" column={4}>

            {data.map((d, k) => {

                console.log(status.dataVun[d])
                return !isObject(status.dataVun[d]) && status.dataVun[d] !== null && status.dataVun[d] !== " " && status.dataVun[d] !== "" ?
                    <Descriptions.Item className="w-[200px]" key={k} label={<span className="uppercase">{d ? d.replace(/_/g, " ") : ""}</span>}>{isString(status.dataVun[d]) ? status.dataVun[d].replace(regex, "E.H.A Engine") : JSON.stringify(status.dataVun[d])}</Descriptions.Item> :
                    isObject(status.dataVun[d]) ?
                        Sub.map((a, k) => {
                            return status.dataVun[d[a]] !== null && status.dataVun[d[a]] !== "" ?
                                <Descriptions.Item key={k} label={<span className="uppercase">{a ? a.replace(/_/g, " ") : ""}</span>}>
                                    {status.dataVun[d][a]}
                                </Descriptions.Item> : ""
                        }) : ""
            })}
        </Descriptions>

    </ModalsComponent>
}

const ListTaskVulnerability = () => {
    const { setStatus, status } = GetAndUpdateContext()
    const stateLocation = useLocation()


    const API = GET_API_EHA.root([{
        active: "vulnerability",
    }])

    const navigate = useNavigate();

    var find = "Nessus";
    var regex = new RegExp(find, "g");

    return (
        <LayoutDashboard className="bg-[#101C26] text-[16px]">
            <div className="col-span-full flex-1 flex flex-col pb-10">
                <CardBox className="!p-0">
                    <div className="p-8 flex items-center justify-between border-b border-primary">
                        {/* <div className="flex items-center gap-10">
                            <div>FUNCTION</div>
                            <div className="space-x-4 flex">
                                <ButtonComponents click={() => {
                                    setStatus(d => ({
                                        ...d,
                                        addvul: !d.addvul
                                    }))
                                }}>
                                    [ + ] ADD
                                </ButtonComponents>

                            </div>
                        </div> */}
                        {/* <div className="flex items-center gap-5">
                            <div>STATUS ASSET</div>
                            <SelectComponent></SelectComponent>
                        </div> */}
                    </div>
                </CardBox>
                <CardBox className="flex-1">
                    <TitleContent subTitle={false}>
                        <div className="flex justify-between w-full">
                            <div className="text-[24px] uppercase text-blue">vulnerabilities {stateLocation.state?.label ? `- ${stateLocation.state?.label}` : ""}</div>
                            {stateLocation.state?.label && <button onClick={() => navigate(-1)} className="border border-blue font-bold px-2 flex items-center gap-2">
                                <ArrowLeftOutlined></ArrowLeftOutlined> <span>GOBACK TO SCAN</span>
                            </button>}

                        </div>
                    </TitleContent>
                    {/* <div className="flex items-center gap-5">
                        <div className="text-[24px] uppercase text-blue">showing date range</div>
                        <Form.input type="date" rowColumn label={"short date"}></Form.input>
                        <Form.input type="date" rowColumn label={"end date"} ></Form.input>
                        <ButtonComponents>apply</ButtonComponents>
                    </div> */}
                    {API.msg || API.error ? <ErrorHtml error={API.msg}></ErrorHtml> : API.loading ? <Loading></Loading> :
                        <TableInline onChange={(s) => {
                            setStatus(d => ({
                                ...d,
                                vulnerabilitypages: s
                            }))
                        }} paggination totalPages={API.data.vulnerability.pagination.total_results} pageSize={15} currentPage={status.vulnerabilitypages} border hoverDisable columns={[
                            {
                                key: "id",
                                rowClass: "w-[120px]",
                                title: "ID",
                                html: (d) => {
                                    return `EL-${d}`
                                }
                            },
                            {
                                key: "deadline_days",
                                rowClass: "w-[200px] text-center",
                                columnClass: "w-[200px] text-center",
                                title: "deadline days"
                            },
                            {
                                key: "finding_name",
                                title: "finding name",
                                rowClass: "w-[400px]",
                            },
                            {
                                key: "stage",
                                rowClass: "w-[100px]",
                                title: "stage"
                            },
                            {
                                key: "solution",
                                rowClass: "w-[700px]",
                                title: "solution",
                                html: d => {
                                    return d.replace(regex, "E.H.A Engine")
                                }
                            },
                            {
                                key: "addresses",
                                rowClass: "w-[120px]",
                                title: "addresses"
                            },
                            {
                                key: "severity",
                                title: "risk level"
                            },
                            {
                                key: "id",
                                title: "VIEW",
                                rowClass: "text-center",
                                columnClass: "text-center",
                                html: (s, data) => {

                                    return <button onClick={() => {
                                        setStatus(d => ({
                                            ...d,
                                            previewModal: true,
                                            dataVun: data
                                        }))
                                    }}><EyeOutlined /></button>
                                }
                            },
                            {
                                key: "id",
                                title: "SOLVED",
                                rowClass: "text-center",
                                columnClass: "text-center",
                                html: (s, d) => {
                                    return <Popconfirm placement="left" okText="SOLVE" cancelText="CANCEL" onConfirm={() => {
                                        let item = {
                                            id: s,
                                            name: d.created_by,
                                            site_name: d.reference
                                        }
                                        DELETE_API.deleteVulnerabilities(item, setStatus)
                                    }} title={<div className="uppercase">Do you want to Solved VULNERABILITIES?</div>}>
                                        <button><CheckOutlined /></button>
                                    </Popconfirm>
                                }
                            },

                        ]}

                            data={API.data.vulnerability.result

                            }></TableInline>
                    }

                </CardBox>
            </div >
            <FormAdd></FormAdd>
            <ModalShow></ModalShow>
        </LayoutDashboard >
    )
}



export default ListTaskVulnerability