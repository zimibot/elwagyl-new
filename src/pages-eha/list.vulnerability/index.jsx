import { ArrowLeftOutlined, EyeOutlined } from "@ant-design/icons"
import { GET_API_EHA } from "../../api/eha/GET"

import { CardBox } from "../../components/layout/card"
import { LayoutDashboard } from "../../components/layout/dashboard.layout"
import { TitleContent } from "../../components/layout/title"
import { TableInline } from "../../components/table"
import { GetAndUpdateContext } from "../../model/context.function"
import { ErrorHtml, Loading } from "../list.maintenance"
import { Descriptions, Typography } from "antd"
import { FormAdd } from "./form-add"
import { useLocation, useNavigate } from "react-router-dom"
import { ModalsComponent } from "../../components.eha/modal"
import { useEffect, useState } from "react"
import { isObject, isString } from "radash"
import { Form } from "../../components.eha/input"
import { switchColor } from "../../helper/switch-color"
const { Paragraph } = Typography;

const ModalShow = () => {
    const { status } = GetAndUpdateContext()
    const [data, setData] = useState([])
    const [Sub, setSub] = useState([])

    var find = "Nessus";
    var regex = new RegExp(find, "g");

    useEffect(() => {

        if (status.dataVun) {
            let item = status.dataVun
            for (const key in item) {
                setData(d => [...d, key])

                if (isObject(item[key])) {
                    for (const itens in item[key]) {
                        setSub(d => [...d, itens])
                    }
                }
            }
        }

        return () => {
            setData([])
            setSub([])
        }

    }, [status.dataVun])


    if (!status.dataVun) {
        return
    }

    console.log(status)

    delete status.dataVun.deleted_at
    delete status.dataVun.deleted_by
    delete status.dataVun.created_at
    delete status.dataVun.updated_at
    delete status.dataVun.updated_by
    delete status.dataVun.scan.deleted_at
    delete status.dataVun.scan.deleted_by
    delete status.dataVun.scan.created_at
    delete status.dataVun.scan.created_by
    delete status.dataVun.scan.updated_at
    delete status.dataVun.scan.updated_by
    delete status.dataVun.checked
    delete status.dataVun.subActive

    let uniqueArray = Array.from(new Set(data));


    return <ModalsComponent width={"100%"} modalName={"previewModal"} title={"Preview VULNERABILITIES"}>

        <Descriptions bordered size="small" layout="horizontal" column={1}>

            {uniqueArray.map((d, k) => {
                return !isObject(status.dataVun[d]) && status.dataVun[d] !== null && status.dataVun[d] !== " " && status.dataVun[d] !== "" ?
                    <Descriptions.Item key={k} label={<span className="uppercase font-bold">{d ? d.replace(/_/g, " ") === "solution" ? "Recommendations" : d.replace(/_/g, " ") : ""}</span>}>
                        <div className="whitespace-break-spaces">
                            {isString(status.dataVun[d]) ? switchColor(status.dataVun[d].replace(regex, "E.H.A Engine")) : JSON.stringify(status.dataVun[d])}
                        </div>
                    </Descriptions.Item> :
                    isObject(status.dataVun[d]) ?
                        Sub.map((a, k) => {
                            return status.dataVun[d[a]] !== null && status.dataVun[d[a]] !== "" ?
                                <Descriptions.Item key={k} label={<span className="uppercase font-bold">{a ? a.replace(/_/g, " ") : ""}</span>}>
                                    {status.dataVun[d][a] === null ? "-" : status.dataVun[d][a]}
                                </Descriptions.Item> : ""
                        }) : ""
            })}
        </Descriptions>

    </ModalsComponent>
}

const ListTaskVulnerability = () => {
    const { setStatus, status } = GetAndUpdateContext()
    const stateLocation = useLocation()
    const [fillter, setFillter] = useState({
        category: "",
        risk_level: ""
    })
    const [pages, setpages] = useState(1)


    const API = GET_API_EHA.root([{
        active: "vulnerability",
        query: `category=${fillter.category}&risk_level=${fillter.risk_level}`,
        pages: pages
    }])




    const navigate = useNavigate();

    var find = "Nessus";
    var regex = new RegExp(find, "g");

    return (
        <LayoutDashboard className="bg-[#101C26] text-[16px]">
            <div className="col-span-full flex-1 flex flex-col pb-10">
                <CardBox className="!p-0">
                    <div className="p-8 flex items-center justify-between border-b border-primary">
                        {/* <div className="flex items-center gap-10">
                            <div>FUNCTION</div>
                            <div className="space-x-4 flex">
                                <ButtonComponents click={() => {
                                    setStatus(d => ({
                                        ...d,
                                        addvul: !d.addvul
                                    }))
                                }}>
                                    [ + ] ADD
                                </ButtonComponents>

                            </div>
                        </div> */}
                        {/* <div className="flex items-center gap-5">
                            <div>STATUS ASSET</div>
                            <SelectComponent></SelectComponent>
                        </div> */}
                    </div>
                </CardBox>
                <CardBox className="flex-1">
                    <TitleContent subTitle={false}>
                        <div className="flex justify-between w-full">
                            <div className="text-[24px] uppercase text-blue">vulnerabilities {stateLocation.state?.label ? `- ${stateLocation.state?.label}` : ""}</div>
                            {stateLocation.state?.label && <button onClick={() => navigate(-1)} className="border border-blue font-bold px-2 flex items-center gap-2">
                                <ArrowLeftOutlined></ArrowLeftOutlined> <span>GOBACK TO SCAN</span>
                            </button>}

                        </div>
                    </TitleContent>
                    <div className="flex items-center gap-5">
                        <div className="text-[24px] uppercase text-blue">Filter : </div>

                        <div className="flex items-center gap-3">
                            <Form.dropdown items={[
                                {
                                    key: "",
                                    label: "all",
                                },
                                {
                                    key: "vulnerabilty",
                                    label: "vulnerability",
                                },
                                {
                                    key: "compliance",
                                    label: "compliance",
                                },
                            ]} label={"Category"}
                                onChange={(w) => {
                                    setFillter(d => ({
                                        ...d,
                                        category: w.key
                                    }))
                                }}></Form.dropdown>
                            <Form.dropdown items={[
                                {
                                    key: "",
                                    label: "all",
                                },
                                {
                                    key: "low",
                                    label: "low",
                                },
                                {
                                    key: "medium",
                                    label: "medium",
                                },
                                {
                                    key: "high",
                                    label: "high",
                                },
                            ]} label={"RISK LEVEL"}
                                onChange={(w) => {
                                    setFillter(d => ({
                                        ...d,
                                        risk_level: w.key
                                    }))
                                }}></Form.dropdown>
                        </div>
                    </div>
                    {API.msg || API.error ? <ErrorHtml error={API.msg}></ErrorHtml> : API.loading ? <Loading></Loading> :
                        <TableInline onChange={(s) => {
                            setpages(s)
                        }} paggination Loading={API.isFetching} totalPages={API.data.vulnerability.pagination.total_results} pageSize={15} currentPage={pages} border hoverDisable
                            columns={[
                                {
                                    key: "id",
                                    rowClass: "w-[80px]",
                                    columnClass: "w-[80px]",
                                    title: "ID",
                                    html: (d) => {
                                        return `EL-${d}`
                                    }
                                },

                                {
                                    key: "finding_name",
                                    title: "finding name",
                                    rowClass: "w-[400px]",
                                    columnClass: "w-[400px]",
                                    html: d => {
                                        return d?.replace(regex, "E.H.A Engine")
                                    }
                                },
                                {
                                    key: "category",
                                    rowClass: "w-[150px]",
                                    columnClass: "w-[150px]",
                                    title: "category"
                                },

                                {
                                    key: "solution",
                                    rowClass: "w-[700px]",
                                    columnClass: "w-[700px]",
                                    title: "RECOMMENDATIONS",
                                    html: d => {
                                        return <Paragraph
                                            className="text-blue !m-0 whitespace-break-spaces"

                                            ellipsis={{
                                                rows: 2,
                                                expandable: true,
                                                // suffix: '...',
                                            }}
                                        // title={`--William Shakespeare`}
                                        >
                                            {d ? d.replace(regex, "E.H.A Engine") : "-"}
                                        </Paragraph>
                                    }
                                },
                                {
                                    key: "addresses",
                                    rowClass: "w-[120px]",
                                    columnClass: "w-[120px]",
                                    title: "addresses"
                                },
                                {
                                    key: "created_at",
                                    rowClass: "w-[150px]",
                                    columnClass: "w-[150px]",
                                    title: "created at"
                                },
                                {
                                    key: "stage",
                                    rowClass: "w-[100px]",
                                    columnClass: "w-[100px]",
                                    title: "stage"
                                },
                                {
                                    key: "risk_level",
                                    rowClass: "w-[120px] text-center",
                                    columnClass: "w-[120px] text-center",
                                    title: "Severity Risk",
                                    html: (data) => {
                                        return switchColor(data)
                                    }
                                },
                                {
                                    key: "deadline_days",
                                    rowClass: "w-[150px] text-center",
                                    columnClass: "w-[150px] text-center",
                                    title: "deadline days"
                                },
                                {
                                    key: "id",
                                    title: "VIEW",
                                    rowClass: "text-center w-[70px]",
                                    columnClass: "text-center w-[70px]",
                                    html: (s, data) => {

                                        return <button onClick={() => {
                                            setStatus(d => ({
                                                ...d,
                                                previewModal: true,
                                                dataVun: data
                                            }))
                                        }}><EyeOutlined /></button>
                                    }
                                },
                                // {
                                //     key: "id",
                                //     title: "SOLVED",
                                //     rowClass: "text-center",
                                //     columnClass: "text-center",
                                //     html: (s, d) => {
                                //         return <Popconfirm placement="left" okText="SOLVE" cancelText="CANCEL" onConfirm={() => {
                                //             let item = {
                                //                 id: s,
                                //                 name: d.finding_name,
                                //                 is_solved: true,
                                //                 updated_by: localStorage.getItem("user")
                                //             }
                                //             UPDATE_API.updateSolvedVul(s, item, API.data.vulnerability.refetch)
                                //         }} title={<div className="uppercase">Do you want to Solved VULNERABILITIES?</div>}>
                                //             <button><CheckOutlined /></button>
                                //         </Popconfirm>
                                //     }
                                // },
                                // {
                                //     key: "id",
                                //     title: "DELETE",
                                //     rowClass: "text-center w-[70px]",
                                //     columnClass: "text-center w-[70px]",
                                //     html: (s, d) => {
                                //         return <Popconfirm placement="left" okText="SOLVE" cancelText="CANCEL" onConfirm={() => {
                                //             let item = {
                                //                 id: s,
                                //                 name: d.created_by,
                                //                 site_name: d.reference
                                //             }
                                //             DELETE_API.deleteVulnerabilities(item, setStatus)
                                //         }} title={<div className="uppercase">Do you want to Solved VULNERABILITIES?</div>}>
                                //             <button><DeleteOutlined /></button>
                                //         </Popconfirm>
                                //     }
                                // },

                            ]}

                            data={API.data.vulnerability.result

                            }></TableInline>
                    }

                </CardBox>
            </div >
            <FormAdd></FormAdd>
            <ModalShow></ModalShow>
        </LayoutDashboard >
    )
}



export default ListTaskVulnerability